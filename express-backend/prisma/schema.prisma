generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model categories {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(100)
  story_categories story_categories[]
}

model comments {
  id              Int               @id @default(autoincrement())
  id_story        Int
  content         String            @db.Text
  status          comments_status   @default(posted)
  stories         stories           @relation(fields: [id_story], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "comments_ibfk_1")

  @@index([id_story], map: "id_story")
}

model images {
  id       Int     @id @default(autoincrement())
  id_story Int
  name     String  @db.VarChar(255)
  stories  stories @relation(fields: [id_story], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "images_ibfk_1")

  @@index([id_story], map: "id_story")
}

model moderators {
  id              Int               @id @default(autoincrement())
  username        String            @unique(map: "username") @db.VarChar(50)
  password        String            @db.VarChar(255)
  name            String            @db.VarChar(100)
}

model stories {
  id               Int                @id @default(autoincrement())
  content          String             @db.Text
  status           stories_status     @default(posted)
  created_at       DateTime?          @default(now()) @db.DateTime(0)
  deletion_token   String?            @db.VarChar(100) @unique
  deleted_at       DateTime?          @db.DateTime(0)
  isFlagged        Boolean            @default(false)
  comments         comments[]
  images           images[]
  story_categories story_categories[]
  profanes         profanes[]
}

model story_categories {
  id            Int        @id @default(autoincrement())
  id_story      Int
  id_categories Int
  stories       stories    @relation(fields: [id_story], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "story_categories_ibfk_1")
  categories    categories @relation(fields: [id_categories], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "story_categories_ibfk_2")

  @@index([id_categories], map: "id_categories")
  @@index([id_story], map: "id_story")
}

model profanes {
  id            Int        @id @default(autoincrement())
  id_story      Int
  category      String     @db.VarChar(255)
  stories       stories    @relation(fields: [id_story], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "profanes_ibfk_1")

  @@index([id_story], map: "id_story")
}

enum stories_status {
  posted
  hold
  deleted
}

enum comments_status {
  posted
  hold
  deleted
}
